{"version":3,"sources":["components/Scores.jsx","components/Toy.jsx","components/GameContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Scores","props","currLevel","highScore","className","Toy","forceStopAnimate","useRef","targetColorIdx","gameColors","current","useEffect","animateToy","sleep","ms","Promise","resolve","setTimeout","a","animateGameColors","i","changeColor","resetColor","color","document","getElementById","style","fill","handleColorClick","e","target","id","levelCompleted","incrementLevel","setGameOver","length","width","height","d","cx","cy","r","xlinkHref","overflow","clipPath","onClick","GameContainer","useState","gameStarted","setGameStarted","gameOver","setCurrLevel","setHighScore","COLORS_ARR","push","Math","floor","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2e332dc.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Scores = (props) => {\n  let currLevel = props.currLevel;\n  let highScore = props.highScore;\n\n  return (\n    <div className=\"Scores\">\n      <div>\n        <b>Level:</b>\n        <div>{currLevel}</div>\n      </div>\n      <div>\n        <b>High Score:</b>\n        <div>{highScore}</div>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\n\nexport const Toy = (props) => {\n  let forceStopAnimate = useRef(false);\n  let targetColorIdx = useRef(0); // Increments on each correct click. Resets on new level.\n  let gameColors = props.gameColors.current;\n  const [YELLOW, BLUE, GREEN, RED] = ['Y', 'B', 'G', 'R'];\n\n  // animate toy whenever game colors change (i.e. when new level is achieved)\n  useEffect(() => {\n    animateToy();\n  });\n\n  const sleep = (ms) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  const animateToy = async () => {\n    await sleep(400);\n\n    var animateGameColors = async (i) => {\n      if (gameColors[i]) {\n        changeColor(gameColors[i]);\n        setTimeout(() => animateGameColors(i + 1), 800);\n      }\n\n      await sleep(500);\n\n      if (forceStopAnimate.current) return;\n      if (gameColors[i]) resetColor(gameColors[i]);\n    };\n\n    animateGameColors(0);\n  };\n\n  const changeColor = (color) => {\n    if (!document.getElementById(color)) return;\n\n    switch (color) {\n      case YELLOW:\n        document.getElementById(YELLOW).style.fill = 'lightyellow';\n        break;\n      case BLUE:\n        document.getElementById(BLUE).style.fill = 'lightblue';\n        break;\n      case GREEN:\n        document.getElementById(GREEN).style.fill = 'lightgreen';\n        break;\n      case RED:\n        document.getElementById(RED).style.fill = 'orange';\n        break;\n      default:\n        break;\n    };\n  };\n\n  const resetColor = (color) => {\n    document.getElementById(color).style.fill = null;\n  };\n\n  const handleColorClick = (e) => {\n    if (e.target.id === gameColors[targetColorIdx.current]) {\n      if (levelCompleted()) {\n        props.incrementLevel();\n        targetColorIdx.current = 0;\n      } else {\n        targetColorIdx.current++;\n      };\n    } else {\n      forceStopAnimate.current = true;\n      targetColorIdx.current = 0;\n      props.setGameOver(true);\n    };\n  };\n\n  const levelCompleted = () => {\n    return targetColorIdx.current === gameColors.length - 1;\n  }\n\n  return (\n    <svg width={201.333} height={201.332} {...props}>\n      <path\n        fill=\"#2B2B2B\"\n        d=\"M201.333 100.666c0 55.597-45.072 100.666-100.665 100.666C45.071 201.332 0 156.263 0 100.666S45.071 0 100.668 0c55.592 0 100.665 45.069 100.665 100.666z\"\n      />\n      <path d=\"M198.333 100.666c0 53.94-43.729 97.666-97.665 97.666C46.728 198.332 3 154.606 3 100.666S46.728 3 100.668 3c53.936 0 97.665 43.726 97.665 97.666z\" />\n      <defs>\n        <circle id=\"prefix__a\" cx={100.666} cy={100.666} r={91.333} />\n      </defs>\n      <clipPath id=\"prefix__b\">\n        <use xlinkHref=\"#prefix__a\" overflow=\"visible\" />\n      </clipPath>\n      <path\n        clipPath=\"url(#prefix__b)\"\n        fill=\"#FFDE17\"\n        d=\"M-2 100.666h102.665v97.666H-2z\"\n      />\n      <path\n        clipPath=\"url(#prefix__b)\"\n        fill=\"#21409A\"\n        d=\"M100.667 100.666h102.665v97.666H100.667z\"\n      />\n      <path\n        clipPath=\"url(#prefix__b)\"\n        fill=\"#00A14B\"\n        d=\"M100.667 3h102.665v97.666H100.667z\"\n      />\n      <path\n        clipPath=\"url(#prefix__b)\"\n        fill=\"#ED1C24\"\n        d=\"M-2 3h102.665v97.666H-2z\"\n      />\n      <g>\n        <defs>\n          <circle id=\"prefix__c\" cx={100.666} cy={100.666} r={86.667} />\n        </defs>\n        <clipPath id=\"prefix__d\">\n          <use xlinkHref=\"#prefix__c\" overflow=\"visible\" />\n        </clipPath>\n        <path\n          id=\"Y\"\n          onClick={(e) => handleColorClick(e)}\n          className=\"toy-btn\"\n          clipPath=\"url(#prefix__d)\"\n          fill=\"#DFC323\"\n          d=\"M3.246 100.666h97.419v92.676H3.246z\"\n        />\n        <path\n          id=\"B\"\n          onClick={(e) => handleColorClick(e)}\n          className=\"toy-btn\"\n          clipPath=\"url(#prefix__d)\"\n          fill=\"#283676\"\n          d=\"M100.667 100.666h97.419v92.676h-97.419z\"\n        />\n        <path\n          id=\"G\"\n          onClick={(e) => handleColorClick(e)}\n          className=\"toy-btn\"\n          clipPath=\"url(#prefix__d)\"\n          fill=\"#00783E\"\n          d=\"M100.667 7.99h97.419v92.676h-97.419z\"\n        />\n        <path\n          id=\"R\"\n          onClick={(e) => handleColorClick(e)}\n          className=\"toy-btn\"\n          clipPath=\"url(#prefix__d)\"\n          fill=\"#C92127\"\n          d=\"M3.246 7.99h97.419v92.676H3.246z\"\n        />\n      </g>\n      <path d=\"M97.167 6.041h7v189h-7z\" />\n      <path d=\"M6.167 97.166h189v7h-189z\" />\n      <circle cx={100.666} cy={100.666} r={33.333} />\n      <circle fill=\"#4C4C4D\" cx={100.666} cy={100.666} r={28.07} />\n    </svg>\n  );\n}\n","import React, { useState, useRef } from 'react';\nimport { Scores } from './Scores';\nimport { Toy } from './Toy';\n\nexport const GameContainer = () => {\n  // state vars\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [currLevel, setCurrLevel] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n\n  // ref vars\n  let gameColors = useRef([]); // game's randomly generated colors\n\n  // constants\n  const COLORS_ARR = ['R', 'G', 'B', 'Y'];\n\n  const incrementLevel = () => {\n    // add random color to gameColors\n    gameColors.current.push(\n      COLORS_ARR[Math.floor(Math.random() * COLORS_ARR.length)]\n    );\n    \n    if (gameOver) {\n      if (currLevel > highScore) setHighScore(currLevel);\n      setCurrLevel(1)\n    } else {\n      setCurrLevel(currLevel + 1);\n    }\n  };\n\n  const startGame = () => {\n    setGameStarted(true);\n    incrementLevel();\n  };\n\n  const restartGame = () => {\n    gameColors.current = [];\n    incrementLevel();\n    setGameOver(false);\n  };\n\n  if (!gameStarted) {\n    return (\n      <div className=\"game-screen\">\n        <div className=\"greetings-container\">\n          <h1>Simon Says</h1>\n          <div className=\"start-button\" onClick={() => startGame()}>\n            Start!\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (gameOver) {\n    return (\n      <div className=\"game-screen\">\n        <div className=\"greetings-container\">\n          <h1>Simon Says</h1>\n          <div className=\"start-button u-orange-button\" onClick={() => restartGame()}>\n            Restart!\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"GameContainer\">\n      <Toy\n        gameColors={gameColors}\n        incrementLevel={incrementLevel}\n        setGameOver={setGameOver}\n      />\n      <Scores currLevel={currLevel} highScore={highScore} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { GameContainer } from './components/GameContainer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <GameContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}